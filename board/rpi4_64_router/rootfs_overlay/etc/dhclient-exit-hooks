#!/bin/sh
#
# This script is called by /sbin/dhclient-script in specific circumstances.
# The dhclient-script script will set various variables that we can use.

fn_calc_ip6addr() {
	l_iface="$1"
	l_prefix="$2"
	l_ia_pd_mac=""
	l_ia_pd_addr=""
	[ -e "/sys/class/net/${l_iface}/address" ] && l_ia_pd_mac="$(cat "/sys/class/net/${l_iface}/address")"
	if [ -n "${l_ia_pd_mac}" ]; then
		l_ia_pd_addr=""
	fi
	if [ -z "${l_ia_pd_addr}" ]; then
		# Making assumptions that we were at least given a /60 prefix
		# and it looks something like 2001:db8:feed:150::/56 or
		# 2001:db8:feed:150::/60. If it is at least /60 or /56, we will
		# assume the final hex character before ::/{prefix-len} will be
		# "0." We will strip off the "0::/{prefix-len}" part and form
		# the following addresses:
		#     eth0: 2001:db8:feed:150::1/60
		#     eth1: 2001:db8:feed:151::1/60
		#     eth2: 2001:db8:feed:152::1/60
		#    wlan0: 2001:db8:feed:153::1/60
		# Note this is all quite fragile, as it will break in plenty of
		# address situations, such as:
		#     2001:db8:f5::/60 - no sed pattern match
		#     2001:db8::/60 - no sed pattern match
		#     2001:db8:3210::/60 - pattern match, but not at right bits
		# TODO: improve this!
		if [ "${l_iface}" = "eth0" ]; then
			echo "${l_prefix}" | sed 's#0::/[[:digit:]]\+#0::1/64#'
		elif [ "${l_iface}" = "eth1" ]; then
			echo "${l_prefix}" | sed 's#0::/[[:digit:]]\+#1::1/64#'
		elif [ "${l_iface}" = "eth2" ]; then
			echo "${l_prefix}" | sed 's#0::/[[:digit:]]\+#2::1/64#'
		elif [ "${l_iface}" = "wlan0" ]; then
			echo "${l_prefix}" | sed 's#0::/[[:digit:]]\+#3::1/64#'
		else
			# BAD ERROR CASE - should not hit
			echo ""
		fi
	else
		echo "${l_ia_pd_addr}"
	fi
}

fn_restart_services() {
	# Only restart if already running.
	# Don't have pgrep installed.
	# shellcheck disable=SC2009
	if [ "$(ps -e | grep -c dnsmasq)" -gt 1 ]; then
		/etc/init.d/S80dnsmasq restart
	fi
}

fn_remove_prefix() {
	l_iface="$1"
	l_new_prefix="$2"
	if [ "$(ip -6 addr show dev "${l_iface}" scope global | wc -l)" -gt 0 ]; then
		logger -t "dhcpv6-pd" -p daemon.info "Info: Flushing global IPv6 addresses from interface ${l_iface}"
		if ! ip -6 addr flush dev "${l_iface}" scope global; then
			logger -t "dhcpv6-pd" -p daemon.err "Error: Failed to flush global IPv6 addres from interface ${l_iface}"
			return
		fi
		# Restart services in case there is no new prefix to assign
		[ -z "${l_new_prefix}" ] && fn_restart_services
	fi
}

fn_assign_prefix() {
	l_iface="$1"
	l_prefix="$2"
	l_new_ia_pd_addr="$(fn_calc_ip6addr "${l_iface}" "${l_prefix}")"
	if [ -z "${l_new_ia_pd_addr}" ]; then
		logger -t "dhcpv6-pd" -p daemon.err "Error: Failed to calculate address for interface ${l_iface} and l_prefix ${l_prefix}."
		return
	fi
	# dhclient may return an old_ip6_prefix even after a reboot, so
	# manually check if the address is already assigned to the interface
	if [ "$(ip -6 addr show dev "${l_iface}" | grep -c "${l_new_ia_pd_addr}")" -lt 1 ]; then
		logger -t "dhcpv6-pd" -p daemon.info "Info: Adding new address ${l_new_ia_pd_addr} to interface ${l_iface}."
		if ! ip -6 addr add "${l_new_ia_pd_addr}" dev "${l_iface}"; then
			logger -t "dhcpv6-pd" -p daemon.err "Error: Failed to add new address ${l_new_ia_pd_addr} to interface ${l_iface}."
			return
		fi
		fn_restart_services
	fi
}

fn_handle_pd_iface() {
	# Remove old prefix if it differs from new prefix
	echo ok
}

# Handle IPv6 Prefix Delegation stuff
# 'reason' is set by dhclient-script
# shellcheck disable=SC2154
case ${reason} in
BOUND6|EXPIRE6|REBIND6|REBOOT6|RENEW6)
	# Only execute if either an old or a new prefix is defined
	if [ -n "${old_ip6_prefix}" ] || [ -n "${new_ip6_prefix}" ]; then
		# Remove old prefix if it differs from new prefix
		if [ -n "${old_ip6_prefix}" ] && [ "${old_ip6_prefix}" != "${new_ip6_prefix}" ]; then
			fn_remove_prefix "eth0" "${new_ip6_prefix}"
			fn_remove_prefix "eth1" "${new_ip6_prefix}"
			fn_remove_prefix "eth2" "${new_ip6_prefix}"
			fn_remove_prefix "wlan0" "${new_ip6_prefix}"
		fi
		# Assign new prefix
		if [ -n "${new_ip6_prefix}" ]; then
			fn_assign_prefix "eth0" "${new_ip6_prefix}"
			fn_assign_prefix "eth1" "${new_ip6_prefix}"
			fn_assign_prefix "eth2" "${new_ip6_prefix}"
			fn_assign_prefix "wlan0" "${new_ip6_prefix}"
		fi
	fi
	;;
esac
