#!/bin/bash
set -o pipefail

bsp_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
print_help=0
buildroot_dir=""
output_dir=""

print_usage() {
	cat << EOF
$0 [options] shortname

This will build the bsp 'shortname' defined in the bsp.cfg file.
WARNING: If [output-dir]/[shortname] already exists, it will be erased and a
clean build will be performed.

Args:
	shortname: The short name listed in bsp.cfg to build

Options:
	-h,--help: Print this help and exit
	-b,--buildroot-dir: The directory in which to find buildroot; defaults to ~/buildroot
	-o,--output-dir: The directory in which to build bsps; defaults to ~/builds
EOF
}

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o 'hb:o:' --long 'help,buildroot-dir:,output-dir:' -n 'bsp' -- "$@")

# shellcheck disable=SC2181
if [ $? -ne 0 ]; then
	echo 'Terminating...' >&2
	exit 1
fi

# Note the quotes around "$TEMP": they are essential!
eval set -- "$TEMP"
unset TEMP

while true; do
	case "$1" in
	'-h'|'--help')
		print_help=1
		shift
		continue
	;;
	'-b'|'--buildroot-dir')
		buildroot_dir="$2"
		shift 2
		continue
	;;
	'-o'|'--output-dir')
		output_dir="$2"
		shift 2
		continue
	;;
	'--')
		shift
		break
	;;
	*)
		echo 'Internal error!' >&2
		exit 1
	;;
	esac
done

# If help is specified, print and exit
if [ ${print_help} -eq 1 ]; then
	print_usage
	exit 1
fi

# Expect one remaining argument, the short name
echo $#
if [ $# -ne 1 ]; then
	echo "No shortname given!"
	print_usage
	exit 1
fi
shortname=$1

# Set defaults for buildroot_dir and output_dir if not supplied
if [ -z "${buildroot_dir}" ]; then
	buildroot_dir="${HOME}/buildroot"
fi
if [ -z "${output_dir}" ]; then
	output_dir="${HOME}/builds"
fi

# Make sure we can find bsp.cfg file
if [ ! -f "${bsp_dir}/bsp.cfg" ]; then
	echo "Could not find bsp.cfg in ${bsp_dir}!"
	exit 1
fi

# Search bsp.cfg for matching shortname to get defconfig and buildroot rev
build_defconfig=""
build_br_rev=""
while IFS= read -r line
do
	# display $line or do somthing with $line
	if [[ "${line}" != \#* ]]; then
		cfg_shortname=$(echo "${line}" | awk '{print $1}')
		if [ "${cfg_shortname}" == "${shortname}" ]; then
			build_defconfig=$(echo "${line}" | awk '{print $2}')
			build_br_rev=$(echo "${line}" | awk '{print $3}')
			break
		fi
	fi
done < "${bsp_dir}/bsp.cfg"

# Quit if no entry found
if [ -z "${build_defconfig}" ] || [ -z "${build_br_rev}" ]; then
	echo "Failure parsing ${bsp_dir}/bsp.cfg for ${shortname}!"
	exit 1
fi

if [ -d "${buildroot_dir}" ]; then
	# If buildroot directory already exists, try to check out desired rev
	echo "Buildroot directory ${buildroot_dir} already exists."

	pushd "${buildroot_dir}" || exit 1

	if [ -n "$(git status --untracked-files=no --porcelain)" ]; then
		echo "Buildroot directory '${buildroot_dir}' not clean or not already a repo. Not checking out needed revision. Stopping build."
		popd || exit 1
		exit 1
	fi

	if ! git fetch --all --tags; then
		echo "Failed to fetch git repo"
		popd || exit 1
		exit 1
	fi

	if ! git checkout "${build_br_rev}"; then
		echo "Failed to checkout ${build_br_rev}"
		popd || exit 1
		exit 1
	fi

	popd || exit 1
else
	# Buildroot directory doesn't exist - clone repo and checkout
	echo "No buildroot directory found. Cloning and checking out rev."

	if ! git clone git://git.buildroot.net/buildroot "${buildroot_dir}"; then
		echo "Failure cloning buildroot"
		exit 1
	fi

	pushd "${buildroot_dir}" || exit 1

	if ! git checkout "${build_br_rev}"; then
		echo "Failed to checkout ${build_br_rev}"
		popd || exit 1
		exit 1
	fi

	popd || exit 1
fi

# Delete any existing build directory
if [ -d "${output_dir}/${shortname}" ]; then
	echo "ERASING EXISTING ${output_dir}/${shortname} DIRECTORY!"
	rm -rf "${output_dir:?}/${shortname:?}"
fi

mkdir -p "${output_dir}/${shortname}"

# Go into buildroot and initialize build
pushd "${buildroot_dir}" || exit 1
if ! make BR2_EXTERNAL="${bsp_dir}" O="${output_dir}/${shortname}" "${build_defconfig}"; then
	echo "Failure setting up build directory"
	popd || exit 1
	exit 1
fi
popd || exit 1

# Go into build directory, get sources, and build
pushd "${output_dir}/${shortname}" || exit 1
if ! make source | tee "${output_dir}/${shortname}/logbuild.log"; then
	echo "Failure downloading sources"
	popd || exit 1
	exit 1
fi
if ! make all | tee -a "${output_dir}/${shortname}/logbuild.log"; then
	echo "Failure during build; check logbuild.log"
	popd || exit 1
	exit 1
fi
popd || exit 1

echo "Build '${shortname}': SUCCESS" | tee -a "${output_dir}/${shortname}/logbuild.log"
